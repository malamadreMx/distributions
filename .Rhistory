arima(x,c(2,0,2))$coef
arima(x,order=c(2,0,2))$coef
arima(x,order=c(0,2,2))$coef
arima(x,order=c(2,2,0))$coef
arima(x,order=c(2,0,2))$coef
x <- arima.sim(n = 10000, list(ar = -0.6, ma = 0.5))
coef(arima(x, order = c(1, 0, 1)))
arima.sim
x=arima.sim(n=100,list(ar=c(1,-.25),ma=c(1,.5)))
x
plot(x)
arima(x,c(2,0,2))
arima(x,c(2,0,2))$coef
arima(x,c(2,0,2))
arima(x,c(2,0,2))$coef
x=arima.sim(n=100,list(ar=c(3.5,-.5),ma=c(1,-.5,.25)))
for(i in 3:n){
x[i]=1.5*x[i-1]-1/2*x[i-2]+w[i]-1/2*w[i-1]+1/4*w[i-2]
}
n= 1000
w = rnorm(n)
x = vector(length = 1000)
for(i in 3:n){
x[i]=1.5*x[i-1]-1/2*x[i-2]+w[i]-1/2*w[i-1]+1/4*w[i-2]
}
arima(x,c(2,0,3))$coef
arima(x,c(3,0,2))$coef
arima(x,c(2,0,3))$coef
x=arima.sim(n=100,list(ar=c(7/10,-1/10),ma=c(1,-1.5)))
arima(x,c(2,0,2))
arima(x,c(2,0,2))$coef
arima(x,c(2,0,2))$coef
arima(x,c(2,0,2))
acf(x)
pacf(x)
acf(x)
arima(x,c(2,0,2))
x=arima.sim(n,list(ar=c(1,-.25),ma=c(1,.5)))
x=arima.sim(n,list(ar=c(1,-.25),ma=c(1,.5)))
x=arima.sim(n,list(ar=c(7/10,-1/10),ma=c(1,-1.5)))
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(1,.5)))
acf(x)
pacf(x)
arima(x,c(2,0,2))
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(1,.5)))
acf(x)
pacf(x)
arima(x,c(2,0,1))
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(1,.5)))
acf(x)
pacf(x)
arima(x,c(2,0,1))
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(1,.5)))
acf(x)
pacf(x)
rm(list=ls())
x = rbeta(1,3)
x = rbeta(100,1,3)
y = ifelse(x>.4,1,0)
glm(y~y)
glm(y~x)
y
x
model=glm(y~x)
model
model$coefficients
model$fitted.values
predictions <- ifelse(model$fitted.values>.5,1,0)
predictions
model$method
model=glm(y~x,family=binomial(link='logit'))
model
model=glm(y~x,family=binomial)
summary(model)
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))
arima(x,c(2,0,1))$coef
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
set.seed(1)
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
set.seed(2)
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
set.seed(2)
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
set.seed(2)
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
set.seed(3)
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
plot(x)
acf(x)
pacf(x)
n=100
x=arima.sim(n=n,list(ar=c(7/10,-1/10),ma=c(-1.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))
n=100
x=arima.sim(n=n,list(ar=c(7/10,-1/10),ma=c(-1.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))
n=100
x=arima.sim(n=n,list(ar=c(7/10,-1/10),ma=c(-1.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))
n=100
x=arima.sim(n=n,list(ar=c(7/10,-1/10),ma=c(-1.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))
x=arima.sim(n=n,list(ar=c(7/10,-1/10),ma=c(-1.5)))
arima(x,c(2,0,1))
fi <- 0.7
teta <- -.5
k <- 0
kk <- seq(0,20,1)
val<-autocorr(fi,teta,kk)
autocorr<-function(fi,teta,k){
ro<-((fi**(k-1))*(fi+teta)*(1+fi*teta))/(1+fi*teta+teta**2)
ro
}
val<-autocorr(fi,teta,kk)
val<-autocorr(fi,teta,kk)
sim<-arima.sim(model=list(ar=.7,ma=-.5,order=c(1,0,1)),n=100)
acf(sim)
acf(sim)
plot(kk,val,type="h")
sim<-arima.sim(model=list(ar=.7,ma=-.5,order=c(1,0,1)),n=100)
acf(sim)
sim<-arima.sim(model=list(ar=.7,ma=-.5,order=c(1,0,1)),n=100)
acf(sim)
plot(kk,val,type="h")
val<-autocorr(fi,teta,kk)
val
pacf(sim)
acf?
?acf
a=acf
a=acf(sim)
a$acf
a$type
a$n.used
a
a
a$lag
a$series
a$snames
sim<-arima.sim(model=list(ar=.7,ma=-.5,order=c(1,0,1)),n=100)
pacf(sim)
plot(kk,val,type="h")
acf(sim)
plot(kk,val,type="h")
acf
sim<-arima.sim(model=list(ar=.7,ma=-.5,order=c(1,0,1)),n=100)
acf(sim)
plot(kk,val,type="h")
acf(sim)
rm(list=ls())
#2.a
n=100
x=arima.sim(n=n,list(ar=c(1,-.25),ma=c(.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
#2.b
n=100
x=vector(length = n)
w=rnorm(n)
for(i in 3:n){
x[i]=1.5*x[i-1]-1/2*x[i-2]+w[i]-1/2*w[i-1]+1/4*w[i-2]
}
acf(x)
pacf(x)
plot.ts(x)
arima(x,c(2,0,2))$coef
#2.c
n=100
x=arima.sim(n=n,list(ar=c(7/10,-1/10),ma=c(-1.5)))
plot(x)
acf(x)
pacf(x)
arima(x,c(2,0,1))$coef
#3.a
autocorr<-function(fi,teta,k){
((fi**(k-1))*(fi+teta)*(1+fi*teta))/(1+fi*teta+teta**2)
}
fi <- 0.7
teta <- -.5
kk <- seq(0,20,1)
val<-autocorr(fi,teta,kk)
#3.b
sim<-arima.sim(model=list(ar=.7,ma=-.5,order=c(1,0,1)),n=100)
acf(sim)
plot(kk,val,type="h")
install.packages("swirl")
library(swirl)
install_course("The R Programming Environment")
rm(list=ls())
ls()
swirl()
do.call("rnorm",list(100,0,5))
do.call("rnorm",list(100,0,5))
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
VADeaths
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths))
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age)
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, -death_rate, -age)
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age)
?gather
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>%
separate(key, c("urban", "gender"), sep = " ")
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>%
separate(key, c("urban", "gender"), sep = " ") %>%
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
paste("radius_34", c("ne", "se", "sw", "nw"), sep = "_")
val1<-seq(-6,6,.05)
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-1000*10000
muestras<-10000
muest<-seq(1,muestras,1)
muesti<-rnorm(10000,0,1)
mean<-as.double(do.call("unif",list(0,1))[1])
mean<-as.double(do.call("runif",list(0,1))[1])
mean<-as.double(do.call("unif",list(0,1))[1])
unif<- function(a,b){
mean<-(a+b)/2
var<-(b-a)**2/12
mv<-list(mean,var)
return(mv)
}
mean<-as.double(do.call("unif",list(0,1))[1])
var<-as.double(do.call("unif",list(0,1))[2])
for(i in 1:(muestras)){
#datos<-rexp(n/muestras,1)
datos<-do.call("runif",list(n/muestras))
muest[i]<-((mean(datos)-mean)*sqrt(n/muestras))/sqrt(var)
}
hist.default(muest,probability = T)
lines(val1,val2)
ad.test(muest)
ks.test(muest,pnorm)
library(goftest)
ad.test(muest)
ks.test(muest,pnorm)
ks.test(muest,qnorm)
ks.test(muest,dnorm)
?ks.test
?ad.test
setwd("cd ..")
setwd("cd .")
setwd("C:/Users/memo/Desktop/Distribuciones/")
source("distribuciones.R")
source("parametros.R")
ls()
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-1000*10000
muestras<-10000
muest<-seq(1,muestras,1)
mean<-as.double(do.call("unif",list(0,1))[1])
var<-as.double(do.call("unif",list(0,1))[2])
for(i in 1:(muestras)){
datos<-do.call("runif",list(n/muestras))
muest[i]<-((mean(datos)-mean)*sqrt(n/muestras))/sqrt(var)
}
hist.default(muest,probability = T)
lines(val1,val2)
ad.test(muest)
ks.test(muest,dnorm)
rm(list=ls())
source("distribuciones.R")
source("parametros.R")
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-1000*10000
muestras<-10000
muest<-seq(1,muestras,1)
mean<-as.double(do.call("PuniformeContinua",list(0,1))[1])
var<-as.double(do.call("PuniformeContinua",list(0,1))[2])
for(i in 1:(muestras)){
datos<-do.call("runif",list(n/muestras))
muest[i]<-((mean(datos)-mean)*sqrt(n/muestras))/sqrt(var)
}
hist.default(muest,probability = T)
lines(val1,val2)
ad.test(muest)
ks.test(muest,dnorm)
shiny::runApp()
datos<-do.call("runif",list(n*muestras))
n
n<-1000
datos<-do.call("runif",list(n*muestras))
datos
n<-1000
muestras<-100
datos<-do.call("runif",list(n*muestras))
datos
datos<-matrix(do.call("runif",list(n*muestras)),ncol=muestras)
datos
apply(datos,2,function(x) {(mean(x)-mean)*sqrt(muestras)/sqrt(var)})
meanMuestras <- apply(datos,2,mean)
meanMuestras
plot()meanMuestras
plot(meanMuestras)
hist(meanMuestras)
hist(meanMuestras,50)
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-1000
muestras<-1000
muest<-seq(1,muestras,1)
mean<-as.double(do.call("PuniformeContinua",list(0,1))[1])
var<-as.double(do.call("PuniformeContinua",list(0,1))[2])
datos<-matrix(do.call("runif",list(n*muestras)),ncol=muestras)
meanMuestras <- apply(datos,2,mean)
hist(meanMuestras)
hist(meanMuestras,50)
val1 <- seq(.4,.6,.005)
val2 <- dnorm(val1,mean,var/n)
lines(val1,val2)
plot(val1,val2)
mean<-as.double(do.call("PuniformeContinua",list(0,1))[1])
var<-as.double(do.call("PuniformeContinua",list(0,1))[2])
var
var/1000
n
plot(val1,val2,type='l')
val1 <- seq(.4,.6,.00005)
val2 <- dnorm(val1,mean,var/n)
plot(val1,val2,type='l')
val1 <- seq(.5,.5,.00005)
val1 <- seq(.5,.55,.00005)
val2 <- dnorm(val1,mean,var/n)
plot(val1,val2,type='l')
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-50
muestras<-1000
muest<-seq(1,muestras,1)
mean<-as.double(do.call("PuniformeContinua",list(0,1))[1])
var<-as.double(do.call("PuniformeContinua",list(0,1))[2])
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-50
muestras<-50
muest<-seq(1,muestras,1)
mean<-as.double(do.call("PuniformeContinua",list(0,1))[1])
var<-as.double(do.call("PuniformeContinua",list(0,1))[2])
datos<-matrix(do.call("runif",list(n*muestras)),ncol=muestras)
meanMuestras <- apply(datos,2,mean)
hist(meanMuestras)
hist(meanMuestras,50)
val1<-seq(-6,6,.05)
val2<-dnorm(val1,0,1)
n<-100
muestras<-100
muest<-seq(1,muestras,1)
mean<-as.double(do.call("PuniformeContinua",list(0,1))[1])
var<-as.double(do.call("PuniformeContinua",list(0,1))[2])
datos<-matrix(do.call("runif",list(n*muestras)),ncol=muestras)
meanMuestras <- apply(datos,2,mean)
hist(meanMuestras)
hist(meanMuestras,50)
tamMuestra<-100
N<-200
mean<-as.double(do.call("Plognormal",list(0,1))[1])
var<-as.double(do.call("Plognormal",list(0,1))[2])
datos<-matrix(do.call("rlnorm",list(tamMuestra*N)),ncol=tamMuestra)
meanMuestras <- apply(datos,2,mean)
meanMuestras
hist(meanMuestras)
hist(meanMuestras,50)
hist(meanMuestras,25)
tamMuestra<-100
N<-10000
muest<-seq(1,muestras,1)
mean<-as.double(do.call("Plognormal",list(0,1))[1])
var<-as.double(do.call("Plognormal",list(0,1))[2])
datos<-matrix(do.call("rlnorm",list(tamMuestra*N)),ncol=tamMuestra)
meanMuestras <- apply(datos,2,mean)
hist(meanMuestras,25)
meanMuestras
datos
datos<-matrix(do.call("rlnorm",list(tamMuestra*N)),ncol=tamMuestra)
meanMuestras <- apply(datos,1,mean)
hist.default(muest,probability = T)
hist(meanMuestras)
hist(meanMuestras,50)
hist.default(meanMuestras,probability = T)
hist(meanMuestras,freq = F)
val1<-seq(-6,6,.05)
tamMuestra<-100
N<-10000
muest<-seq(1,muestras,1)
tamMuestra<-100
N<-10000
mean<-as.double(do.call("Plognormal",list(0,1))[1])
var<-as.double(do.call("Plognormal",list(0,1))[2])
datos<-matrix(do.call("rlnorm",list(tamMuestra*N)),ncol=tamMuestra)
meanMuestras <- apply(datos,1,mean)
val1 <- seq(min(meanMuestras),max(meanMuestras),length.out = 1000)
val2 <- dnorm(val1,mean,var/tamMuestra)
hist(meanMuestras,freq = F)
lines(val1,val2)
val2 <- dnorm(val1,mean,sqrt(var/tamMuestra))
lines(val1,val2)
hist(meanMuestras,freq = F)
lines(val1,val2)
?ad.test
ad.test(muest,pnorm,mean = mean, sd = sqrt(var/n))
ad.test(muest,"pnorm",mean = mean, sd = sqrt(var/n))
runApp()
ls()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
ls()
library(distributions)
binomialNegativa(100,5,.6)
mean(binomialNegativa(100,5,.6))
mean(binomialNegativa(100,5,.6))
mean(binomialNegativa(100,5,.6))
mean(binomialNegativa(100,5,.6))
mean(binomialNegativa(100,5,.6))
binomialNegativa
devtools::install_github("malamadreMx/distributions")
library(distributions)
devtools::install_github("malamadreMx/distributions")
devtools::install_github("malamadreMx/distributions")
